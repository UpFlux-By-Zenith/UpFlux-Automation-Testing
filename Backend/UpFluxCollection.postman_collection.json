{
	"info": {
		"_postman_id": "658ef189-5911-4013-89f0-1bab74fe0961",
		"name": "UpFluxCollection",
		"description": "This Collection holds all the Backend automation testing script for UpFlux Solution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38739685"
	},
	"item": [
		{
			"name": "Autorization and Authentication",
			"item": [
				{
					"name": "LoginTests",
					"item": [
						{
							"name": "AdminLogin",
							"item": [
								{
									"name": "ValidLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Extract token from the response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"token\", jsonData.token);\r",
													"    pm.expect(pm.environment.get(\"token\")).to.exist;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status((400));\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Email and Password are required.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Email and Password are required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "Verify the login process for admin users, including valid and invalid credentials."
						},
						{
							"name": "AdminTest",
							"item": [
								{
									"name": "AdminListTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Admin/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Admin",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"description": "Get and validate a list of all admins in UpFlux"
						},
						{
							"name": "AdminPasswordChange",
							"item": [
								{
									"name": "ValidOldPassword",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generate New Password\r",
													"const randomNumber = Math.floor(Math.random() * 10000); \r",
													"\r",
													"const originalPassword = \"EduUpFlux2425\";\r",
													"\r",
													"const newPassword = `${originalPassword}${randomNumber}`;\r",
													"\r",
													"pm.environment.set(\"NewAdminPassword\", newPassword);\r",
													"pm.environment.set(\"ConfirmNewPassword\", newPassword); \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is 'Password changed successfully.'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.equal(\"Password changed successfully.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"{{AdminPassword}}\",\r\n  \"newPassword\": \"{{NewAdminPassword}}\",\r\n  \"confirmPassword\": \"{{NewAdminPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidOldPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401 for invalid password\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Old password is incorrect.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Old password is incorrect.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"xxxxxxxxxxxxxx\",\r\n  \"newPassword\": \"{{NewAdminPassword}}\",\r\n  \"confirmPassword\": \"{{NewAdminPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "WeakPasswordEnforcement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test weak password response\r",
													"pm.test(\"Weak password response\", function () {\r",
													"    //pm.expect(pm.response.code).to.equal(400);\r",
													"     pm.expect(pm.response.code).to.equal(401);\r",
													"    //pm.expect(pm.response.json().message).to.equal(\"Password is too weak\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"{{AdminPassword}}\",\r\n  \"newPassword\": \"12345\",\r\n  \"confirmPassword\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								}
							],
							"description": "create tests for the password reset API to ensure password management meets security standards."
						},
						{
							"name": "EngineerLogin",
							"item": [
								{
									"name": "EngineerTokenCreation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Engineer token is extracted from the response body and set as environment variable\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"engineerToken\", jsonData.engineerToken);\r",
													"    pm.expect(jsonData.engineerToken).to.exist;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerEmail\": \"{{engineerEmail}}\",\r\n  \"engineerName\": \"engineer\",\r\n  \"machineIds\": [\r\n    \"M1, M2\"\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/create-engineer-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"create-engineer-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ValidEngineerLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body has token\", function () {\r",
													"    pm.response.to.have.jsonBody('token');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerToken\": \"{{engineerToken}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/engineer/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"engineer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidEngineerLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Invalid token for the provided email.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid token for the provided email.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerToken\": \"{{engineerToken}}yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJlbmdpbmVlckB1cGZsdXguY29tIiwiTWFjaGluZUlkcyI6Ik0xLCBNMiIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkVuZ2luZWVyIiwiZXhwIjoxNzM3NTcyOTc0LCJpc3MiOiJVcEZsdXgiLCJhdWQiOiJVcEZsdXhBUEkifQ.vNRSoC3fBEMqCjJdNCV3V6OgIoRgzeHrAP26LtC5cyM\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/engineer/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"engineer",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "Test the engineer login functionality, ensuring valid and invalid credential"
						}
					],
					"description": "Test the login functionality for both admin and engineer roles to ensure secure access and proper handling of user credentials."
				},
				{
					"name": "TokenManagementTests",
					"item": [
						{
							"name": "TokenParsing",
							"item": [
								{
									"name": "ValidTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Asserting the response to be in JSON format\r",
													"pm.test(\"Response body is in JSON format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"{{engineerToken}}\"\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}+x",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"{{engineerToken}}\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpiredTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJFZHVhcmRvQGFkbWluLnVwZmx1eC5jb20iLCJNYWNoaW5lSWRzIjoiIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoiQWRtaW4iLCJleHAiOjE3Mzc1NzY0MTIsImlzcyI6IlVwRmx1eCIsImF1ZCI6IlVwRmx1eEFQSSJ9.5fSffVmw3IImP6FkyLj-T9Fq0h8AeusJ2CrLEtFgiIM\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								}
							],
							"description": "Validates the ability to parse valid, tampered, and expired tokens, ensuring proper error handling for unauthorized or expired token scenarios."
						}
					],
					"description": "Contains tests for validating the creation, parsing, and security of authentication tokens. The tests ensure that tokens are generated securely, validated correctly, and expire as expected."
				},
				{
					"name": "Shared Endpoints",
					"item": [
						{
							"name": "AccessAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains email and role\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessEngineerToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains email and role\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "UnauthorizedAccess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Content-Length value is 0\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						}
					],
					"description": "This Folder containds access control test for the shared endpoint API, ensuring proper handling of requests with valid, invalid, or missing tokens.EndFragment"
				}
			],
			"description": "Validate the security and functionality of authentication and authorization endpoints, ensuring proper access control and data handling."
		},
		{
			"name": "DataRequestTests",
			"item": [
				{
					"name": "MachineAccess",
					"item": [
						{
							"name": "MachineValidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Engineer email exists\", function () {\r",
											"    pm.expect(pm.response.json().engineerEmail).to.exist;\r",
											"        pm.expect(pm.response.json().accessibleMachines).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "MachineInvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid token header exists\", function () {\r",
											"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('invalid_token');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}+x",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "MachinewithoutToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid token header exists\", function () {\r",
											"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('Bearer');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests access control to machine data and shared endpoints, verifying responses for valid, expired, or missing tokens and role-based restrictions."
				}
			],
			"description": "Validates role-based access control and token authentication to ensure secure access to machine data and shared endpoints while rejecting unauthorized or invalid requests."
		},
		{
			"name": "LicenseTests",
			"item": [
				{
					"name": "RegisterMachineTests",
					"item": [
						{
							"name": "InvalidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test to verify the specific error message\r",
											"pm.test(\"Error response structure and message validation\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Verify the error message for MachineId\r",
											"    pm.expect(responseData).to.have.property(\"errors\");\r",
											"    pm.expect(responseData.errors).to.have.property(\"MachineId\");\r",
											"    pm.expect(responseData.errors.MachineId).to.be.an('array').that.includes(\"The MachineId field is required.\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"machineId\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Licence/admin/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized access returns 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}+x",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"machineId\": \"M1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Licence/admin/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verifies the functionality of the machine registration endpoint, ensuring correct handling of valid and invalid machine IDs."
				},
				{
					"name": "GenerateUUIDTests",
					"item": [
						{
							"name": "GenerateValidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains machineId\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('machineId');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Licence/admin/generateId",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"generateId"
									]
								}
							},
							"response": []
						},
						{
							"name": "GenerateInValidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}+x",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Licence/admin/generateId",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"generateId"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests the UUID generation endpoint to confirm that a valid UUID is consistently produced and handles unauthorized access properly."
				}
			],
			"description": "Tests related to licensing operations, including machine registration and UUID generation for device identification."
		},
		{
			"name": "AboutTests",
			"item": [
				{
					"name": "AboutTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and response includes application name\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"Application Name: Upflux-WebService\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body has required headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/UpFlux/about",
							"host": [
								"{{url}}"
							],
							"path": [
								"UpFlux",
								"about"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verifies the functionality of the `/UpFlux/about` endpoint, ensuring it correctly returns a plain text response with a status code of 200."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}