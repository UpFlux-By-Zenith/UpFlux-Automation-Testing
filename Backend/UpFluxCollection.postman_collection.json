{
	"info": {
		"_postman_id": "181a299a-d652-44d0-8b4a-88bd1d3e469b",
		"name": "UpFluxCollection",
		"description": "This Collection holds all the Backend automation testing script for UpFlux Solution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38739685"
	},
	"item": [
		{
			"name": "Autorization and Authentication",
			"item": [
				{
					"name": "LoginTests",
					"item": [
						{
							"name": "AdminLogin",
							"item": [
								{
									"name": "ValidLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Extract token from the response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"token\", jsonData.token);\r",
													"    pm.expect(pm.environment.get(\"token\")).to.exist;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status((401));\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Invalid credentials'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid credentials\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"kljlj\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "Verify the login process for admin users, including valid and invalid credentials."
						},
						{
							"name": "AdminTest",
							"item": [
								{
									"name": "AdminListTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Admin/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Admin",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "AdminGetAllMachines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should receive accessibleMachines from the body\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.property('accessibleMachines');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Auth/admin/get-all-machines",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"get-all-machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "EngineerList",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Admin/engineers",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Admin",
												"engineers"
											]
										}
									},
									"response": []
								}
							],
							"description": "Get and validate a list of all admins in UpFlux"
						},
						{
							"name": "AdminPasswordChange",
							"item": [
								{
									"name": "InvalidNewPassword",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generate New Password\r",
													"const randomNumber = Math.floor(Math.random() * 10000); \r",
													"\r",
													"const originalPassword = \"EduUpFlux2425\";\r",
													"\r",
													"const newPassword = `${originalPassword}${randomNumber}`;\r",
													"\r",
													"pm.environment.set(\"NewAdminPassword\", newPassword);\r",
													"pm.environment.set(\"ConfirmNewPassword\", newPassword); \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is 'All fields are required.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"All fields are required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"{{AdminPassword}}\",\r\n  \"newPassword\": \"\",\r\n  \"confirmPassword\": \"{{ConfirmNewPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidOldPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401 for invalid password\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Old password is incorrect.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Old password is incorrect.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"xxxxxxxxxxxxxx\",\r\n  \"newPassword\": \"{{NewAdminPassword}}\",\r\n  \"confirmPassword\": \"{{NewAdminPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "WeakPasswordEnforcement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is 'Old password is incorrect.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Old password is incorrect.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"oldPassword\": \"{{AdminPassword}}\",\r\n  \"newPassword\": \"12345\",\r\n  \"confirmPassword\": \"12345\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"change-password"
											]
										}
									},
									"response": []
								}
							],
							"description": "create tests for the password reset API to ensure password management meets security standards."
						},
						{
							"name": "EngineerLogin",
							"item": [
								{
									"name": "EngineerTokenCreation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Engineer token is extracted from the response body and set as environment variable\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"engineerToken\", jsonData.engineerToken);\r",
													"    pm.expect(jsonData.engineerToken).to.exist;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerEmail\": \"{{engineerEmail}}\",\r\n  \"engineerName\": \"engineer\",\r\n  \"machineIds\": [\r\n    \"M1, M2\"\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/admin/create-engineer-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"admin",
												"create-engineer-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ValidEngineerLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body has token\", function () {\r",
													"    pm.response.to.have.jsonBody('token');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerToken\": \"{{engineerToken}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/engineer/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"engineer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidEngineerLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response error message is 'Invalid token for the provided email.'\", function () {\r",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid token for the provided email.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"engineerToken\": \"{{engineerToken}}yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJlbmdpbmVlckB1cGZsdXguY29tIiwiTWFjaGluZUlkcyI6Ik0xLCBNMiIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkVuZ2luZWVyIiwiZXhwIjoxNzM3NTcyOTc0LCJpc3MiOiJVcEZsdXgiLCJhdWQiOiJVcEZsdXhBUEkifQ.vNRSoC3fBEMqCjJdNCV3V6OgIoRgzeHrAP26LtC5cyM\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/engineer/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"engineer",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "Test the engineer login functionality, ensuring valid and invalid credential"
						}
					],
					"description": "Test the login functionality for both admin and engineer roles to ensure secure access and proper handling of user credentials."
				},
				{
					"name": "TokenManagementTests",
					"item": [
						{
							"name": "TokenParsing",
							"item": [
								{
									"name": "ValidTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Asserting the response to be in JSON format\r",
													"pm.test(\"Response body is in JSON format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"{{engineerToken}}\"\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}+x",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"{{engineerToken}}\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpiredTokenParsing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJFZHVhcmRvQGFkbWluLnVwZmx1eC5jb20iLCJNYWNoaW5lSWRzIjoiIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoiQWRtaW4iLCJleHAiOjE3Mzc1NzY0MTIsImlzcyI6IlVwRmx1eCIsImF1ZCI6IlVwRmx1eEFQSSJ9.5fSffVmw3IImP6FkyLj-T9Fq0h8AeusJ2CrLEtFgiIM\"\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/Auth/parse-token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Auth",
												"parse-token"
											]
										}
									},
									"response": []
								}
							],
							"description": "Validates the ability to parse valid, tampered, and expired tokens, ensuring proper error handling for unauthorized or expired token scenarios."
						}
					],
					"description": "Contains tests for validating the creation, parsing, and security of authentication tokens. The tests ensure that tokens are generated securely, validated correctly, and expire as expected."
				},
				{
					"name": "Shared Endpoints",
					"item": [
						{
							"name": "AccessAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains email and role\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessEngineerToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains email and role\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "UnauthorizedAccess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Content-Length value is 0\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Auth/shared-endpoint",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"shared-endpoint"
									]
								}
							},
							"response": []
						}
					],
					"description": "This Folder containds access control test for the shared endpoint API, ensuring proper handling of requests with valid, invalid, or missing tokens.EndFragment"
				}
			],
			"description": "Validate the security and functionality of authentication and authorization endpoints, ensuring proper access control and data handling."
		},
		{
			"name": "DataRequestTests",
			"item": [
				{
					"name": "MachineAccess",
					"item": [
						{
							"name": "MachineValidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Engineer email exists\", function () {\r",
											"    pm.expect(pm.response.json().engineerEmail).to.exist;\r",
											"        pm.expect(pm.response.json().accessibleMachines).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "MachineInvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid token header exists\", function () {\r",
											"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('invalid_token');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{engineerToken}}+x",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "MachinewithoutToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid token header exists\", function () {\r",
											"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('Bearer');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/access-machines",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"access-machines"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests access control to machine data and shared endpoints, verifying responses for valid, expired, or missing tokens and role-based restrictions."
				},
				{
					"name": "AplicationTests",
					"item": [
						{
							"name": "ApplicationTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.applications).to.exist.and.to.be.an('array');\r",
											"    responseData.applications.forEach(function(application) {\r",
											"        pm.expect(application).to.have.property('appId');\r",
											"        pm.expect(application).to.have.property('machineId');\r",
											"        pm.expect(application).to.have.property('appName');\r",
											"        pm.expect(application).to.have.property('addedBy');\r",
											"        pm.expect(application).to.have.property('currentVersion');\r",
											"        pm.expect(application).to.have.property('versions').and.to.be.an('array');\r",
											"        application.versions.forEach(function(version) {\r",
											"            pm.expect(version).to.have.property('versionId');\r",
											"            pm.expect(version).to.have.property('appId');\r",
											"            pm.expect(version).to.have.property('versionName');\r",
											"            pm.expect(version).to.have.property('updatedBy');\r",
											"            pm.expect(version).to.have.property('date');\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Versions array is present and contains expected number of elements\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.applications).to.be.an('array');\r",
											"  pm.expect(responseData.applications[0].versions).to.be.an('array');\r",
											"  pm.expect(responseData.applications[0].versions).to.have.lengthOf.at.least(1, \"Versions array should contain at least one element\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Versions array properties are non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.applications).to.be.an('array');\r",
											"    \r",
											"    responseData.applications.forEach(application => {\r",
											"        pm.expect(application.versions).to.be.an('array');\r",
											"        \r",
											"        application.versions.forEach(version => {\r",
											"            pm.expect(version.versionName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Version name should not be empty\");\r",
											"            pm.expect(version.updatedBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Updated by should not be empty\");\r",
											"            pm.expect(version.date).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Date should not be empty\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/DataRequest/engineer/machines-application",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"DataRequest",
										"engineer",
										"machines-application"
									]
								}
							},
							"response": []
						}
					],
					"description": "Display the data requested for the applications available in UpFlux."
				}
			],
			"description": "Validates role-based access control and token authentication to ensure secure access to machine data and shared endpoints while rejecting unauthorized or invalid requests."
		},
		{
			"name": "LicenseTests",
			"item": [
				{
					"name": "RegisterMachineTests",
					"item": [
						{
							"name": "InvalidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test to verify the specific error message\r",
											"pm.test(\"Error response structure and message validation\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Verify the error message for MachineId\r",
											"    pm.expect(responseData).to.have.property(\"errors\");\r",
											"    pm.expect(responseData.errors).to.have.property(\"MachineId\");\r",
											"    pm.expect(responseData.errors.MachineId).to.be.an('array').that.includes(\"The MachineId field is required.\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"machineId\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Licence/admin/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized access returns 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}+x",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"machineId\": \"M1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Licence/admin/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verifies the functionality of the machine registration endpoint, ensuring correct handling of valid and invalid machine IDs."
				},
				{
					"name": "GenerateUUIDTests",
					"item": [
						{
							"name": "GenerateValidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains machineId\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('machineId');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Licence/admin/generateId",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"generateId"
									]
								}
							},
							"response": []
						},
						{
							"name": "GenerateInValidMachineID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}+x",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Licence/admin/generateId",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Licence",
										"admin",
										"generateId"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests the UUID generation endpoint to confirm that a valid UUID is consistently produced and handles unauthorized access properly."
				}
			],
			"description": "Tests related to licensing operations, including machine registration and UUID generation for device identification."
		},
		{
			"name": "AboutTests",
			"item": [
				{
					"name": "AboutTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and response includes application name\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"Application Name: Upflux-WebService\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body has required headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/UpFlux/about",
							"host": [
								"{{url}}"
							],
							"path": [
								"UpFlux",
								"about"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verifies the functionality of the `/UpFlux/about` endpoint, ensuring it correctly returns a plain text response with a status code of 200."
		},
		{
			"name": "NotificationTests",
			"item": [
				{
					"name": "CreateGroupTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has required headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Message contains created successfully\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"created successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"{{engineerToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Notification/create-group",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Notification",
								"create-group"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUriTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has required headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Message contains added to group\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"added to group\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"{{engineerToken}}\",\r\n  \"uri\": \"{{uri}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Notification/add-uri",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Notification",
								"add-uri"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveUriTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has required headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains URI removed from group\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"removed from group\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"{{engineerToken}}\",\r\n  \"uri\": \"{{uri}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Notification/remove-uri",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Notification",
								"remove-uri"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verify the functionalities of create group, add uri and remove uri in notification endpoints."
		},
		{
			"name": "SecurityTests",
			"item": [
				{
					"name": "BruteForceProtectionTests",
					"item": [
						{
							"name": "BruteForceProtectionTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"BruteForcePassword\", `wrong-password`);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"login_attempts\", 0);\r",
											"\r",
											"const maxAttempts = 5;\r",
											"let attempts = pm.environment.get(\"login_attempts\") || 0;\r",
											"\r",
											"// Log the attempts and response code for debugging\r",
											"console.log(\"Current Attempts Before Increment:\", attempts);\r",
											"console.log(\"Response Code:\", pm.response.code);\r",
											"console.log(\"Response Body:\", pm.response.text());\r",
											"\r",
											"// Increment and save the attempt count\r",
											"attempts++;\r",
											"pm.environment.set(\"login_attempts\", attempts);\r",
											"console.log(\"Updated Attempts After Increment:\", attempts);\r",
											"\r",
											"// Test for brute-force protection\r",
											"if (attempts > maxAttempts) {\r",
											"    pm.test(\"Brute-force protection should trigger\", () => {\r",
											"        console.log(\"Expecting 429 or 403 for rate limiting...\");\r",
											"        pm.expect(pm.response.code).to.be.oneOf([429, 403]);  \r",
											"        pm.expect(pm.response.text()).to.include(\"Too many login attempts\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Login attempt still allowed\", () => {\r",
											"        console.log(\"Expecting 401 for incorrect credentials...\");\r",
											"        pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"        pm.expect(pm.response.json().error).to.eql(\"Invalid credentials\");\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{BruteForcePassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "Ensures the API enforces rate limiting and prevents multiple failed login attempts to protect against brute-force attacks."
				},
				{
					"name": "RateLimitingTests",
					"item": [
						{
							"name": "RetryAfterHeaderRateLimiting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const maxAttempts = 5;\r",
											"const attempts = parseInt(pm.environment.get(\"rateLimitAttempts\"));\r",
											"\r",
											"// Test for successful responses before rate limiting\r",
											"if (attempts <= maxAttempts) {\r",
											"    pm.test(\"Request is not yet rate-limited\", () => {\r",
											"        pm.expect(pm.response.code).to.not.equal(429); \r",
											"    });\r",
											"} else {\r",
											"    // Test for rate limiting response\r",
											"    pm.test(\"Rate limiting triggered\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(429);\r",
											"    });\r",
											"\r",
											"    // Test for Retry-After header presence\r",
											"    pm.test(\"Retry-After header exists\", () => {\r",
											"        pm.expect(pm.response.headers.has(\"Retry-After\")).to.be.true;\r",
											"    });\r",
											"\r",
											"    // Test for Retry-After header value\r",
											"    const retryAfter = pm.response.headers.get(\"Retry-After\");\r",
											"    pm.test(\"Retry-After header is valid\", () => {\r",
											"        pm.expect(parseInt(retryAfter)).to.be.a(\"number\").and.to.be.greaterThan(0);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"wrong-password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "RateLimitingTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Set the expected rate limit response code\r",
											"const rateLimitCode = 429;\r",
											"const currentAttempt = pm.environment.get(\"authenticated_rate_limit_attempt\") || 1;\r",
											"pm.environment.set(\"authenticated_rate_limit_attempt\", parseInt(currentAttempt));\r",
											"\r",
											"// Verify response based on attempt count\r",
											"if (currentAttempt <= 10) {\r",
											"    // For requests within the allowed limit\r",
											"    pm.test(\"Request is within rate limit\", () => {\r",
											"        pm.expect(pm.response.code).to.not.equal(rateLimitCode); \r",
											"    });\r",
											"} else {\r",
											"    // For requests exceeding the rate limit\r",
											"    pm.test(\"Rate limiting triggered\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(rateLimitCode);\r",
											"    });\r",
											"\r",
											"    // Verify Retry-After header\r",
											"    pm.test(\"Retry-After header exists\", () => {\r",
											"        pm.expect(pm.response.headers.has(\"Retry-After\")).to.be.true;\r",
											"    });\r",
											"\r",
											"    // Validate Retry-After header value\r",
											"    const retryAfter = pm.response.headers.get(\"Retry-After\");\r",
											"    pm.test(\"Retry-After header is valid\", () => {\r",
											"        pm.expect(parseInt(retryAfter)).to.be.a(\"number\").and.to.be.greaterThan(0);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Admin/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Admin",
										"list"
									]
								}
							},
							"response": []
						}
					],
					"description": "Validates API rate limiting mechanisms to ensure proper handling of excessive requests and protection against abuse."
				},
				{
					"name": "SSL/TLS_Tests",
					"item": [
						{
							"name": "SSL/TLSTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Request is sent over HTTPS\", () => {\r",
											"//     pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
											"// });\r",
											"\r",
											"pm.test(\"Response status is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains a token\", function () {\r",
											"    pm.response.to.have.jsonBody(\"token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "SecureDataTransitionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Authenticated request is successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// pm.test(\"Request is sent over HTTPS\", function () {\r",
											"//     pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
											"// });\r",
											"\r",
											"pm.test(\"Response has Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time is acceptable\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
											"});\r",
											"\r",
											"pm.test(\"Server is Kestrel\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Kestrel\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"engineerToken\": \"{{engineerToken}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/engineer/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"engineer",
										"login"
									]
								},
								"description": "### Login Engineer\n\nThis endpoint is used to authenticate an engineer through the provided engineer token.\n\n#### Request Body\n\n- `engineerToken` (string, required): The token of the engineer for authentication.\n    \n\n#### Response\n\n- `token` (string): The authentication token for the engineer.\n    \n\n#### Headers\n\n- `Content-Type`: application/json\n    \n\n#### Specific Instructions\n\nMake sure to include the `engineerToken` in the request body to authenticate the engineer."
							},
							"response": []
						},
						{
							"name": "SecurityHeaderTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Extract token from the response body\", function () {\r",
											"    pm.expect(pm.environment.get(\"token\")).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains security headers\", () => {\r",
											"    pm.expect(pm.response.headers.has(\"X-XSS-Protection\")).to.be.true;\r",
											"    pm.expect(pm.response.headers.has(\"X-Content-Type-Options\")).to.be.true;\r",
											"    pm.expect(pm.response.headers.has(\"Content-Security-Policy\")).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "Validates HTTPS enforcement, secure data transmission, and API security headers to ensure safe communication."
				},
				{
					"name": "InvalidInputHandlingTest",
					"item": [
						{
							"name": "MissingFieldsTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required field - error\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.error).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Presence of specific header in the response is validated\", function () {\r",
											"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### POST /api/Auth/admin/login\n\nThis endpoint is used to authenticate an admin user by providing their email and password.\n\n#### Request Body\n\n- email (string, required): The email address of the admin user.\n    \n- password (string, required): The password of the admin user.\n    \n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\nThe response will include an \"error\" property with a string value, indicating the error message if the authentication fails."
							},
							"response": []
						},
						{
							"name": "MalFormedEmailTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has error message for invalid email\", function () {\r",
											"    pm.expect(pm.response.json().error).to.equal(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"admin@UpFluxxxxxx.com\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### Login Admin\n\nThis endpoint allows administrators to log in.\n\n#### Request Body\n\n- `email` (string): The email address of the administrator.\n    \n- `password` (string): The password of the administrator.\n    \n\n#### Response\n\n- Status: 401\n    \n- Content-Type: application/json\n    \n- { \"error\": \"\"}"
							},
							"response": []
						},
						{
							"name": "ShortPasswordTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status((401));\r",
											"});\r",
											"\r",
											"pm.test(\"Response error message is 'Invalid credentials'\", function () {\r",
											"    pm.expect(pm.response.json().error).to.equal(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.response.to.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response content type is JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "The endpoint `/api/Auth/admin/login` is a POST request used for admin login authentication.\n\n### Request Body\n\n- The request body should be in raw JSON format and include the following parameters:\n    \n    - `email` (string): The email of the admin user.\n        \n    - `password` (string): The password of the admin user.\n        \n\nExample:\n\n``` json\n{\n  \"email\": \"{{AdminEmail}}\",\n  \"password\": \"12345\"\n}\n\n ```\n\n### Response\n\nThe response for this request is in the form of a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\nThe response status code for the last execution was 401, indicating unauthorized access."
							},
							"response": []
						},
						{
							"name": "ExtraUnexpectedFieldsTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.response.to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"{{AdminEmail}}\", \r\n    \"password\": \"{{AdminPassword}}\",\r\n    \"role\": \"admin\",\r\n    \"rolee\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### Admin Login\n\nThis endpoint allows administrators to log in.\n\n#### Request Body\n\n- `email` (string, required): The email of the administrator.\n    \n- `password` (string, required): The password of the administrator.\n    \n- `role` (string, required): The role of the user, which should be set as \"admin\".\n    \n\n#### Response Body\n\nThe response will include the authentication token and user information upon successful login."
							},
							"response": []
						},
						{
							"name": "InvalidDataTypeTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains type, title, status, errors, and traceId\", function () {\r",
											"    pm.response.to.have.jsonBody(\"type\");\r",
											"    pm.response.to.have.jsonBody(\"title\");\r",
											"    pm.response.to.have.jsonBody(\"status\");\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"    pm.response.to.have.jsonBody(\"traceId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Errors field contains request\", function () {\r",
											"    pm.response.to.have.jsonBody(\"errors.request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present in the response\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": 12345, \r\n    \"password\": true \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### Login as Admin\n\nThis endpoint allows administrators to log in.\n\n#### Request Body\n\n- `email` (string) - The email address of the admin.\n    \n- `password` (boolean) - The password for the admin account.\n    \n\n#### Response\n\n- Status: 400\n    \n- Content-Type: application/problem+json\n    \n\nThe response will contain an error object with details about the validation errors, if any.\n\nExample response body:\n\n``` json\n{\n    \"type\": \"\",\n    \"title\": \"\",\n    \"status\": 0,\n    \"errors\": {\n        \"request\": [\"\"],\n        \"$.email\": [\"\"]\n    },\n    \"traceId\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "LargePayloadTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let largePayload = \"A\".repeat(1024 * 1024); \r",
											"\r",
											"pm.environment.set(\"LargePayload\", largePayload);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Large payload should result in 413 status\", function () {\r",
											"    pm.response.to.have.status(413);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have a Content-Type header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{AdminEmail}}\",\r\n  \"password\": \"{{AdminPassword}}\",\r\n  \"extraField\": \"{{LargePayload}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "This test ensures the API correctly handles malformed or invalid input by preventing the backend from crashing or leaking sensitive information."
				},
				{
					"name": "SQLInjectionTests",
					"item": [
						{
							"name": "AuthenticationBypassTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has 'error' field\", function () {\r",
											"    pm.response.to.have.jsonBody('error');\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"    pm.expect(pm.response.json().error).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers contain 'Content-Type'\", function () {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"});\r",
											"pm.test(\"Response headers contain 'Date'\", function () {\r",
											"    pm.response.to.have.header('Date');\r",
											"});\r",
											"pm.test(\"Response headers contain 'Server'\", function () {\r",
											"    pm.response.to.have.header('Server');\r",
											"});\r",
											"pm.test(\"Response headers contain 'Transfer-Encoding'\", function () {\r",
											"    pm.response.to.have.header('Transfer-Encoding');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"' OR '1'='1\", \r\n    \"password\": \"{{AdminPassword}}\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### POST /api/Auth/admin/login\n\nThis endpoint is used to authenticate an admin user.\n\n#### Request\n\n- Method: POST\n    \n- URL: {{url}}/api/Auth/admin/login\n    \n- Body:\n    \n    - email (text, required): The email of the admin user.\n        \n    - password (text, required): The password of the admin user.\n        \n\n#### Response\n\nThe response for this request can be represented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\n- Status: 401\n    \n- Content-Type: application/json\n    \n- { \"error\": \"\"}"
							},
							"response": []
						},
						{
							"name": "MaliciousQueryExecutionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.response.to.have.jsonBody(\"error\", \"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has 'error' field\", function () {\r",
											"    pm.response.to.have.jsonBody('error');\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"    pm.expect(pm.response.json().error).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers contain Content-Type\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers contain Date\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers contain Server\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers contain Transfer-Encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"'; DROP TABLE users; --\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### Login Admin\n\nThis endpoint allows administrators to log in.\n\n#### Request Body\n\n- email (text, required): The email address of the administrator.\n    \n- password (text, required): The password for the administrator's account.\n    \n\n#### Response\n\n- Status: 401\n    \n- Content-Type: application/json\n    \n- error (string): An error message indicating the reason for the failed login attempt."
							},
							"response": []
						},
						{
							"name": "UnionBasedInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"' UNION SELECT null, null --\",\r\n    \"password\": \"{{AdminPassword}}\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### API Request Description\n\nThis endpoint is used to authenticate an admin user by sending a POST request to the specified URL. The request should include the admin's email and password in the request body.\n\n#### Request Body Parameters\n\n- `email` (string): The email of the admin user.\n    \n- `password` (string): The password of the admin user.\n    \n\n### API Response\n\nThe response to this request will be in JSON format with a status code of 401. The response will include an `error` field, which may provide additional information about the authentication failure.\n\n#### Response JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"error\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "TimeBasedInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"email\": \"'; WAITFOR DELAY '00:00:05'; --\", \r\n     \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "# Admin Login\n\nThis endpoint allows administrators to log in.\n\n## Request Body\n\n- `email` (string): The email address of the administrator.\n    \n- `password` (string): The password for the administrator account.\n    \n\n## Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"error\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response will include an `error` field, which will contain a string value providing details about any error that occurred during the login process."
							},
							"response": []
						},
						{
							"name": "SpecialCharactersTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"'\\\";--\",\r\n    \"password\": \"{{AdminPassword}}\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "WildCardInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"%' OR '1'='1\",\r\n    \"password\": \"{{AdminPassword}}\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### API Request Description\n\nThis API endpoint is a POST request to {{url}}/api/Auth/admin/login. It is used to authenticate an admin user by providing their email and password in the request body.\n\n#### Request Body\n\n- `email` (string) - The email of the admin user.\n    \n- `password` (string) - The password of the admin user.\n    \n\n### API Response\n\nThe API responds with a status code of 401 and a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"error\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response includes an `error` field which provides information about the error encountered during the authentication process."
							},
							"response": []
						},
						{
							"name": "ScriptInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"email\": \"<script>alert('XSS')</script>\", \r\n     \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### Admin Login\n\nThis endpoint allows administrators to log in.\n\n#### Request Body\n\n- `email` (string) - The email address of the administrator.\n    \n- `password` (string) - The password of the administrator.\n    \n\n#### Response\n\n- Status: 401\n    \n- Content-Type: application/json\n    \n- `error` (string) - Error message indicating the reason for the authentication failure."
							},
							"response": []
						},
						{
							"name": "ExploitingDataBaseErrorsTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid credentials\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"});\r",
											"\r",
											"pm.test(\"Transfer-Encoding header is present\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' OR 1=CONVERT(int, 'test'); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "This endpoint allows administrators to log in by sending a POST request to {{url}}/api/Auth/admin/login. The request should include the administrator's email and password in the request body.\n\n### Request Body\n\n- email (string): The email of the administrator.\n    \n- password (string): The password of the administrator.\n    \n\n### Response\n\nUpon successful authentication, the server returns a status code of 200 along with a JSON response containing the authentication token and user details. In case of authentication failure, the server returns a status code of 401 with a JSON response containing an error message.\n\nExample Response:\n\n``` json\n{\n  \"error\": \"Authentication failed\"\n}\n\n ```"
							},
							"response": []
						}
					],
					"description": "Identify vulnerabilities in the login endpoints by attempting to input SQL commands in text fields."
				},
				{
					"name": "AdvancedSQLInjectionTests",
					"item": [
						{
							"name": "StackedQueriesTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for stacked queries\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose SQL keywords\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"DROP TABLE\");\r",
											"    pm.expect(pm.response.text()).to.not.include(\"SELECT * FROM Admins\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"'; DROP TABLE users; SELECT * FROM Admins; --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExtractingDatabaseVersionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose database version\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"@@VERSION\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' UNION SELECT null, @@VERSION --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExtractingTableNamesTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose table names\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"information_schema.tables\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is not exposing sensitive information\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.not.include(\"SQL\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' UNION SELECT table_name, null FROM information_schema.tables; --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ErrorBasedInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose SQL errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"CONVERT\");\r",
											"    pm.expect(pm.response.text()).to.not.include(\"syntax error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' AND 1=CONVERT(int, 'test'); --\",\r\n  \"password\": \"irrelevantPassword\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "The `POST /api/Auth/admin/login` endpoint is used to authenticate an admin user.\n\n### Request\n\nThe request should include the following parameters in the request body:\n\n- `email` (string): The email of the admin user.\n    \n- `password` (string): The password of the admin user.\n    \n\n### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\nThe response will have a status code of 401 if the authentication fails."
							},
							"response": []
						},
						{
							"name": "BlindBooleanInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose existence conditions\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"EXISTS\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' OR EXISTS(SELECT 1 FROM Users WHERE username='admin'); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BlindTimeBasedInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is reasonable\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(3000); \r",
											"\r",
											"// });\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' OR IF(1=1, SLEEP(5), 0); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NestedSubqueryInjectionTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose nested queries\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"SELECT username FROM\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' AND (SELECT username FROM (SELECT * FROM Users) AS Sub)='admin'; --\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### API Request Description\n\nThis endpoint is used to authenticate an admin user by providing their email and password.\n\n#### Request Body\n\n- `email` (string) - The email of the admin user.\n    \n- `password` (string) - The password of the admin user.\n    \n\n### API Response (JSON Schema)\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"error\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "CrossDatabaseQueriesTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose cross-database information\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"master..syslogins\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose SQL syntax\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"UNION SELECT\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' UNION SELECT null, null, password FROM master..syslogins; --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### API Request Description\n\nThis endpoint allows administrators to log in to the system. The request should be sent as an HTTP POST to the specified URL with the necessary payload in the raw request body.\n\n#### Request Body\n\n- `email` (string): The email address of the administrator.\n    \n- `password` (string): The password of the administrator.\n    \n\n### API Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"token\": \"string\",\n  \"user\": {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"role\": \"string\"\n  }\n}\n\n ```\n\nThe response contains a token for authentication and the user details including their ID, name, email, and role."
							},
							"response": []
						},
						{
							"name": "ExploitingStoredProceduresTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not execute stored procedures\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"EXEC xp_cmdshell\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header does not expose sensitive details\", function () {\r",
											"    var serverHeader = pm.response.headers.get(\"Server\");\r",
											"    pm.expect(serverHeader).to.not.include(\"SQL\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"'; EXEC xp_cmdshell('dir'); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								},
								"description": "### /api/Auth/admin/login\n\nThis endpoint is used to authenticate an admin user.\n\n#### Request\n\n- Method: POST\n    \n- { \"email\": \"string\", \"password\": \"string\"}\n    \n    - `email`: The email of the admin user.\n        \n    - `password`: The password of the admin user.\n        \n\n#### Response\n\n- Status: 401\n    \n- Content-Type: application/json\n    \n- { \"type\": \"object\", \"properties\": { \"error\": { \"type\": \"string\" } }}\n    \n    - `error`: A string indicating the error message, if any."
							},
							"response": []
						},
						{
							"name": "TimeBasedInjectionLongDelayTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server header is not exposing database technology\", function () {\r",
											"    var serverHeader = pm.response.headers.get(\"Server\");\r",
											"    pm.expect(serverHeader).to.not.include(\"SQL\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' OR IF(1=1, SLEEP(10), 0); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExtractingColumnDataFromUsersTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose column data\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"username\");\r",
											"    pm.expect(pm.response.text()).to.not.include(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' UNION SELECT username, password FROM Users; --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExtractingDataBaseNametest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message for invalid input\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose database name\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"database()\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not expose SQL syntax\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"UNION SELECT\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"' UNION SELECT null, database(); --\",\r\n  \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "Contains advanced test cases for SQL injection vulnerabilities, including data extraction, and complex query manipulation to ensure robust backend security against high-risk attack scenarios."
				},
				{
					"name": "HTMLInjectionTest",
					"item": [
						{
							"name": "BasicHeadingTagTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define a single HTML payload for this request\r",
											"const htmlPayload = \"<h1>Test</h1>\";\r",
											"\r",
											"// Set payload in Postman environment\r",
											"pm.environment.set(\"html_payload\", htmlPayload);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ScriptTagTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const htmlPayload = \"<script>alert('XSS');</script>\";\r",
											"pm.environment.set(\"html_payload\", htmlPayload);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ImageTagWithOnErrorEventTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const htmlPayload = \"<img src='x' onerror='alert(\\\"Hacked\\\")'>\";\r",
											"let escapedPayload = htmlPayload.replace(/\"/g, '\\\\\"');\r",
											"\r",
											"pm.environment.set(\"html_payload\", escapedPayload);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "MaliciousiFrameTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const htmlPayload = \"<iframe src='http://malicious-site.com'></iframe>\";\r",
											"let escapedPayload = htmlPayload.replace(/\"/g, '\\\\\"'); \r",
											"\r",
											"pm.environment.set(\"html_payload\", escapedPayload);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "JavaScriptURLTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const htmlPayload = \"<a href='javascript:alert(\\\"Injected\\\")'>Click Me</a>\";\r",
											"let escapedPayload = htmlPayload.replace(/\"/g, '\\\\\"');\r",
											"\r",
											"pm.environment.set(\"html_payload\", escapedPayload);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "HiddenInputFIeldPayloadTest",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const htmlPayload = \"<input type='text' value='Injected'>\";\r",
											"let escapedPayload = htmlPayload.replace(/\"/g, '\\\\\"'); \r",
											"\r",
											"pm.environment.set(\"html_payload\", escapedPayload);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let responseBody = pm.response.text();\r",
											"let expectedErrorMessage = \"Invalid credentials\";\r",
											"let payload = pm.environment.get(\"html_payload\");\r",
											"\r",
											"pm.test(\"HTML Injection - No Reflection of Payload\", function () {\r",
											"    pm.expect(responseBody).to.not.include(payload);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Correct Error Message\", function () {\r",
											"    pm.expect(pm.response.json().error).to.eql(expectedErrorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"HTML Injection - Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{html_payload}}\",\r\n    \"password\": \"{{AdminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/Auth/admin/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests for vulnerabilities where unsanitized HTML input can be injected and executed in the application."
				}
			],
			"description": "Validate API endpoints for vulnerabilities, ensuring protection against threats like brute-force attacks, unauthorized access, and rate-limiting bypasses."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}